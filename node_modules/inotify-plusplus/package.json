{
  "_args": [
    [
      "inotify-plusplus@git://github.com/gbaumgart/node-inotify-plusplus.git#master",
      "/PMaster/projects/x4mm/Code/utils/dist/linux"
    ]
  ],
  "_from": "git://github.com/gbaumgart/node-inotify-plusplus.git#master",
  "_id": "inotify-plusplus@1.0.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/inotify-plusplus",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/gbaumgart/node-inotify-plusplus/master/package.json",
      "gitUrl": "git://github.com/gbaumgart/node-inotify-plusplus.git#master",
      "httpsUrl": "git+https://github.com/gbaumgart/node-inotify-plusplus.git#master",
      "shortcut": "github:gbaumgart/node-inotify-plusplus#master",
      "ssh": "git@github.com:gbaumgart/node-inotify-plusplus.git#master",
      "sshUrl": "git+ssh://git@github.com/gbaumgart/node-inotify-plusplus.git#master",
      "type": "github"
    },
    "name": "inotify-plusplus",
    "raw": "inotify-plusplus@git://github.com/gbaumgart/node-inotify-plusplus.git#master",
    "rawSpec": "git://github.com/gbaumgart/node-inotify-plusplus.git#master",
    "scope": null,
    "spec": "git://github.com/gbaumgart/node-inotify-plusplus.git#master",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/gbaumgart/node-inotify-plusplus.git#48537045ad7e02e2882d9e6abfbf80ae4bb7ea8a",
  "_shasum": "54969ba3ca31222cb78b49da0dee5f70f16f5dd7",
  "_shrinkwrap": null,
  "_spec": "inotify-plusplus@git://github.com/gbaumgart/node-inotify-plusplus.git#master",
  "_where": "/PMaster/projects/x4mm/Code/utils/dist/linux",
  "author": {
    "email": "coolaj86@gmail.com",
    "name": "AJ ONeal"
  },
  "contributors": [],
  "dependencies": {
    "inotify": "~1.4.0"
  },
  "description": "A wrapper around node-inotify that is more like JavaScript, less like C, and easier for beginners",
  "devDependencies": {},
  "gitHead": "48537045ad7e02e2882d9e6abfbf80ae4bb7ea8a",
  "keywords": [
    "util",
    "inotify"
  ],
  "lib": "lib",
  "main": "./lib/inotify++",
  "name": "inotify-plusplus",
  "optionalDependencies": {},
  "readme": "node-inotify++\n====\n\nA wrapper around [`node-inotify`](http://github.com/c4milo/node-inotify) which is more like `JavaScript` and less like `C`.\n\n  * strings instead of bitmasks\n  * self-documenting: `console.dir(inotify)` tells you just about all you need to know.\n  * each event has a default handler\n  * by default only the events which have callbacks are listened to\n    * `all_events` listens to all events with registered callbacks\n    * the option `all_events_is_catchall` causes `all_events` to listen on all events, period.\n\nUsage\n====\n\ninstantiation\n----\n\n    var Inotify = require('inotify-plusplus'), // should be 'inotify++', but npm has issues with the ++\n        inotify,\n        directive,\n        options;\n\n    inotify = Inotify.create(true); // stand-alone, persistent mode, runs until you hit ctrl+c\n    //inotify = Inotify.create(); // quits when event queue is empty\n\nwith Default Handlers\n----\n\nThe default handler simply outputs the `docstring` such as \"File was opened\"\n\n    directive = {\n        access: true,\n        close_write: true,\n        open: true\n    };\n    options = {\n        allow_bad_paths: true, // (default false) don't throw an error if the path to watch doesn't exist\n    };\n    inotify.watch(directive, './path/to/watch', {});\n\nwith Custom Handlers\n----\n\n    directive = {\n        all_events: function (ev) {\n          console.log(\"some things happened: \" + ev.masks.toString())\n        },\n        moved_from: true\n    }\n    options = {\n        all_events_is_catchall: true // by default (false) \"all_events\" only catches events already listened for.\n                                     // this option tells \"all_events\" to catch all events, period.\n    }\n    inotify.watch(directive, './path/to/watch');\n\nnote that \"ev.masks\" is an array of strings, not a bitmask and \"ev.watch\" is the path rather than the watch descriptor.\n\nExample `ev`:\n\n    { watch: '/path/to/watch', masks: '[\"access\", \"move_to\"]', cookie: 1, name: 'name_of_file' }\n\nwith Modules\n----\n\n    directive = (function() {\n        // private variables\n        var count = 0,\n          validate_watch,\n          move,\n          cookies = {};\n\n        // shared method\n        move = function (ev) {\n            var pre = cookies[ev.cookie];\n            if (pre) {\n              console.log(\"finished move from \" + pre.name + \" to \" + ev.name);\n              cookies[ev.cookie] = undefined;\n              delete cookies[ev.cookie];\n            } else {\n              // expires the cookie if the move doesn't complete in this watch\n              console.log(\"began move of \" + ev.name);\n              cookies[ev.cookie] = ev;\n              setTimeout(function () {\n                cookies[ev.cookie] = undefined;\n                delete cookies[ev.cookie];\n              }, 500);\n            }\n        };\n\n        // will listen to three events\n        // multiple events may fire at the same time\n        return {\n          all_events: function(ev) {\n            // example ev: { watch: '/path/to/watch', masks: '[\"access\", \"move_to\"]', cookie: 1, name: 'name_of_file' }\n            validate_watch();\n            count += 1;\n            console.log(\"These masks were just activated: '\" + ev.masks.toString() + \"' for '\" + ev.name + \"'.\");\n          },\n          access: function (ev) {\n            console.log(ev.name + \" was accessed.\");\n          },\n          moved_to: move,\n          moved_from: move,\n          delete: true\n        };\n    }());\n    inotify.watch(directive, './path/to/watch');\n\nstopping / restarting watch\n----\n\n    var unwatch, rewatch;\n    unwatch = inotify.watch(dirctive, path);\n    rewatch = unwatch(); // stops watching\n    unwach = rewatch();\n\nInstallation\n====\n\nInstall node-inotify:\n\n    cd ~/\n    git clone git://github.com/c4milo/node-inotify.git\n    cd node-inotify\n    node-waf configure build\n\n    # or\n\n    npm install inotify\n\nInstall node-inotify++:\n\n    mkdir ~/.node_libraries/\n    wget http://github.com/coolaj86/node-inotify-plusplus/blob/master/lib/inotify%2B%2B.js -O \\\n      ~/.node_libraries/inotify++.js\n\n    # or\n\n    npm install inotify-plusplus # installing inotify from npm currently fails and hence this may fail\n\nDocumentation\n====\n\n`console.dir(Inotify.watch_for_doc);`\n    {\n        access: \"File was accessed (read)\",\n        attrib: \"Metadata changed, e.g., permissions, timestamps, extended attributes, link count (since Linux 2.6.25), UID, GID, etc.\",\n        close_write: \"File opened for writing was closed\",\n        close_nowrite: \"File not opened for writing was closed\",\n        create: \"File/directory created Inotify the watched directory\",\n        \"delete\": \"File/directory deleted from the watched directory\",\n        delete_self: \"Watched file/directory was deleted\",\n        modify: \"File was modified\",\n        move_self: \"Watched file/directory was moved\",\n        moved_from: \"File moved out of the watched directory\",\n        moved_to: \"File moved into watched directory\",\n        open: \"File was opened\",\n        all_events: \"Watch for all kind of events\",\n        close: \"(IN_CLOSE_WRITE | IN_CLOSE_NOWRITE) Close\",\n        move: \"(IN_MOVED_FROM | IN_MOVED_TO) Moves\"\n    }\n\n`console.dir(Inotify.info_doc);`\n    {\n        in_ignored: \"Watch was removed explicitly with inotify.removeWatch(watch_descriptor) or automatically (the file was deleted, or the file system was unmounted)\",\n        in_isdir: \"Subject of this event is a directory\",\n        in_q_overflow: \"Event queue overflowed (wd is -1 for this event)\",\n        in_unmount: \"File system containing the watched object was unmounted\"\n    }\n\n`console.dir(Inotify.flags_doc);`\n    {\n      onlydir: \"only watch the path if it is a directory.\",\n      dont_follow: \"do not follow symbolics links\",\n      oneshot: \"only send events once\",\n      mask_add: \"add (or) events to watch mask for this pathname if it already exists (instead of replacing the mask).\"\n    }\n",
  "readmeFilename": "README.md",
  "url": "http://github.com/coolaj86/node-inotify-plusplus/",
  "version": "1.0.3"
}
